sudo: required
language: python
services: docker
env:
  global:
  - secure: GfO2uyUDZEwZUMylOEQqGCQ7wr9EZw6qb1z5j9ArBmmsT3r2SwGBTrgL/ytC+wvCa8ufmVg7OxWqbBmFCoOiVX8/UN6quzbkKX9cszl0/OLL32EtWMqQ1HayulEAWyPysPqp5VUljJ18R8H3AbPfEhj0QVh98i7lErIqbe5AiRAECUUjwPK/AGY+oCgaxqJtU25YiFUZZ1gLmVRliIqlMYacQp8MUFLS80KsSIXyl7BclZOUGK2pD9hEykWBzhr34WvTAZi+nSDRfQZdDGScBFa28G2OarY1k9dOdvmvHX0CfcQq5Aw1tVAzF0oqAhVM++mv96N+9O7UJ8QKtj/geFGxfegaZEttMMEsxgdiBw/2YJeUjN+QYr3x1ajUQSJpNkC2eB6VGH3pTds+LHOCI34P0P618wS/sJ3Me7z/sG5oshDq4TCRoDnsKwEEasG4KDFxHJbc+IjcjJZn348kqg4fJYSzxdEv7v1NRIXhzwUZRe1GMIfuv9McL19zHQQjXox5UXkuu0Bb5gI8BbE6ENfwLq2Ae2JAP5lGRIsORUqkOcoME+dL5dq4mgt2o3p2mWh0Cj4gWjBa3UB0b9rl2iDksGrxPAFRVcUFhu4P6D3O9QDOW1NYcqx0WhoxcOuU2oBsJ5OyMSJ4hIgHTKjGXRdIJJ/WtXU3/8fp5hMPnDw=
  - secure: dKwA0zfGSKZkEeS8ZKGEYWvpL+8aiT6HnfknAjVdX7Y7yDXGsve8s8ORs7pjLUYERanVswgfV05n/JICDe7f5oVME6v3CvfVEi7nvLb8tv+jZ7IbdAfmALGQVG5divyRUvYpFd21+Kr36GDUXV1FxOZ/KeLING1tBGpi4/WKw2zyVoyUeXVu3XZag33iH/Xm1mwG3TuNF0m4QmTaKdap1SUKerQ1BmjCfmJ5fAA0dN3Yf7TUmaa5yfahqOOiFws4QzF4bVvU0lI01CgwsfANlZMFlLCDMrJWDvMORZg0NuMVd5pC6wugalIIUOn+Dl4Yj1O+JSqHiODQES40kcQy2AgLqRxob9B8Fj559w81SWBxa3w3ZhKfQfO63RiSXtHO6yZg0DvQZJMHUb8BwBoeslPMzist+t0wagT1okES0NQBoNMO6RSCi2A5nmP1NqPfL9MkQo/mBob1MiU9QBZAtXUVQfiYESDuZuLIIiRP9dMYHDaJY3daQeTVhqUL6DaVlsyFOsWa1cxXQp3r4jTb+FJQl6x9HHcW/lygNoyw9rpm+JBK2O4SFCUxHmWHvuiH0jpJ9bS9VioEJ8sBfLA6YzMFZSu8RudnQe8OIkCzWNrH0u13YB/D5rLg2Yg6OTh124EvuAJTj89f2ewDPVqT4DV3tpZ9VLWN9Be4/q1259k=
  - secure: knn6FVmuJ9Omf9GttjQd+dSTd+f6wT1ub60Z+XN/d/clNhtj6IWRZUDYPXZTgkaLnrOylan9ZHA0MDBtyO+szqmx8x06jknSmFmy7bThzzJdZrUyLUxpqvMyS641Qkqgw1IO43cgp6my2r6+6+r+Uqt1eXbr6/xGLiLVeQGM70R5PGpdftmzhbCB8haUD5g5jgmMRSRnmAwOECQOzHC3kPIP4THap9GGf8jsM4TOCsj/WvX+fgucemgG1YwFPLsR8eMU4f6u1dPtV5QAH0nJ5JOmhzN8dzXjbFbk8IAbPdHOMWq/wbAnQKIkFDtdXwKJk1nHXkHSE/y7JUnqCPk0AiXjIvPWJN+FVYHNA7nNPN+ugi9DYEfc1tAW7KrwUbDU1LMvkZC4iPeArmDbZwQo1b80uGJRbxK8DXEspCyE/wv2yg5efENeQG3Dqwltm8HoIaEd0+skwYTO/tg6PA+GKF7/JygPzSdbujc1K5MMYPyoQi6ZYALSljGIPmMTPPss8hWqCuEt+s9hoUVuO84kMaZvcFk57YZ+/MAY1YppYXcBCSahiKE0pj6tCAL3Q4gnLGvAQuvab/CzQZoLUg9I4mKzHFJOu6qW/lAip7fg8ff3x/wUVzuO5Us0J88j6c4/bX5q8uwkkARYyNGdsIlUgsqVVzvT8jHmLOgzLk6+GrU=
  - secure: GiPqCjSjxbNfzm/ji89JvKOqJ3k48c4KjmfjhQLDA4Fjc02UMWNdRNzkRo0FdyJ6cTo4dILyk9dgFgdJ9+ARxXXiTNk6b7lG8kQPpHzj4uLOoMQcqaeAXU1LmB0CyKEOfMgmhgTCvDDjw+ijsVksJ75frZNRaxrRJTbJxmPsgCpz8pmUco6TN73CdtHOhbxDCLJZp+DIcpd9BoigSrers2/0+l+7rJXAjLS4bZgJGZ2dI4o66MALY4YRGR7D+ZuP6DJ0f0/0K2w3JlxffPZVMBX5ozJjGno3VJ/phBq2Qevgty9SaE8eCd+h+j9ToScahKSsQCZLEpxaFK17mSXUx3MCamR+pKpLXG1KrEHUBADDpZ2wZmfamUAhMe8Jstv2842jqVvzdqFKTfDV4hfBzwkoFhk0in45uWQ7eAqN+YMzwtc3bjRsOxFHm7jK4oYLX0ZYYQgSMjMiyal3AWgOV8Zd92FQxpUaLBWawJSY2ztPwE1CNywgO3iBt58QQZsudzfPy4yaS1ZY55bsfdOiPT/pRQTEqzs4kcDMBO37JxP/PjreGWiYDDemfRhuQNkxwvOkgc6vpq0NWATATtxpB+x3pwRo3ZLXPzvvzRgfVQDvjtb+X7NSSDmI2TqSNe2rIG1tVGvA9Q10AeBTgDjNKQMmTP+Sa0GEUYKWlq5nb7U=
  - secure: Nx51GjzsFS5o3HX5Kjop84YU8jOrf9FHxJTsxFWZguGBFF3s+HqDhL1ESiZIJST/VerbjHyI0EdBdm9Bdor58lGm2lbsFjYvR06UCoZZRNWGiDHyr5bV1ozNvTbHGlksLjaTKA8aURG2YTorTpmd2fpCO2yavNjQJRUNtjmlVKJQNUoMebSV8vZEV8Nmh7nVRUhs01/J9EtbJYPypi9pFufdOIim7gb4nv//ZViKB3Bb9BowIDSNwlu6hStFG77G5oy7tdX0BxGFIwm9D32Chy5ZZcNWozVmGK3JySBldu/bKIp+FRjjdM5cgnVvBqTY9GAOvMHHn6gssNMXAFDocLAbjiojzIIyU7vdTBBPyTEHzh9frWW02DssSFkCQ39BgfX1EwC8gGN59yO6NTI1Pr06NUAtkIYZnuhDu5qodmy7fqN39SbNGjiOrrH45PBBjP16NrlhuMAIlQyVuxCOT9sBY47rcmrzGiRQ2tfJwdqDGgg50YEfH1tncNSUsFdoAD/DEffGvzcq+4s7yzp75qxxiR/nMRl6yrPOWe3zhAvRAWUUzNWHmwqWTQyogFXDfYnt2k8lC3zjjgukO/QwzvSgy2Zw8tetywimBmI5bwhwohoQNf5BdkXygRr/n17RQ9U9Hrr4q9Ub4+YKd1ZYC2XKxv2K9S6JnziPoWIe6t0=
  - secure: RlBFX7vFjELX/JLeXm1OEnX42LFic/0A7hqagovHndqM+9940DrlVNfGHL8OI60zg8CPdLWt6WYTl4Qi/uj9Qk6wgL3/AYmM26LrJqCuUch0MqNpdPbJSUfuwQNCPvpapGBVFFsTbZ4PgHQE0tsPXVcSPnFiH3IpQi3uzX2hpZSRX7Lr/ZhcAwhjCQGbLRZ5LQ0GPUQJzRhjMEJO8oNfLG/X4PQ5nWauiNPVNfhG7ResKuDirLtCj28+VpxKxywoJXESmq6q/jNNk2cWWW4CPtqc73uIiOIesI+qkt2un6giPfk/nmKwHBz+RlWROIj6bolgaY0qsD6SaCLtj9uLb+fPdxATFJJT2srweS8be5Ac9ipgYDY+VeGhe4z75cRc3ii3xCZ38JeE0PMCosRfiHlVTpdfL9hNd7KpifvcPYHF3Ho/fUtF+7NhIj8zEBqV3OZ/bxQuGK3JjonKuyfFPIMW6qK1riTwjjTItlGqXR31GuXXjDOqOX/g7amIsLESLJ/DUetYzT09UbuN6lPSmUV4TF5451d2q9eSWo5q38t+PLkyQsAYiGzfWEipJkPg3tiNh9fmVEB+eED/1aZxkMhOc3YYFUBQG6teJEmykRY040JOcrjlg4aW4DijMTcuOQroMdTE6y/j7O1IHowBi/0Swuy7m7/Vvx/1o+VyWes=
before_install:
  - docker --version
  - CHANGED_FILES=($(git diff --name-only $TRAVIS_COMMIT_RANGE))
  - echo $CHANGED_FILES
script:
  - python -c "import sys; print(sys.version)"
after_success:
  - |
    dockerfile=Dockerfile.ubuntu-16.04_pgi17.4
    if [[ $CHANGED_FILES =~ (^|[[:space:]])$dockerfile($|[[:space:]]) ]]; then
      image=${dockerfile#Dockerfile.}
      echo "-- Building $image"
      mkdir -p pgilinux
      curl -L $PGI_URL | tar -xz -C pgilinux
      docker build --build-arg BUILD_LOCALLY="false" -t "$DOCKER_USERNAME"/$image -f $dockerfile .
      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      docker push "$DOCKER_USERNAME"/$image
      echo "-- DONE with $image"
      rm -rf pgilinux
      docker rmi "$DOCKER_USERNAME"/$image
    fi
  # Build PGI+HDF5 image
  - |
    dockerfile=Dockerfile.ubuntu-16.04_pgi17.4_hdf5
    if [[ $CHANGED_FILES =~ (^|[[:space:]])$dockerfile($|[[:space:]]) ]]; then
      image=${dockerfile#Dockerfile.}
      echo "-- Building $image"
      docker build --build-arg BUILD_LOCALLY="false" -t "$DOCKER_USERNAME"/$image -f $dockerfile .
      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      docker push "$DOCKER_USERNAME"/$image
      echo "-- DONE with $image"
      docker rmi "$DOCKER_USERNAME"/$image
    fi
  # Build GCC+OpenMPI+MKL image
  - |
    dockerfile=Dockerfile.ubuntu-16.04_gcc5.3.1_openmpi1.10_mkl2017.4.239
    if [[ $CHANGED_FILES =~ (^|[[:space:]])$dockerfile($|[[:space:]]) ]]; then
      image=${dockerfile#Dockerfile.}
      echo "-- Building $image"
      mkdir -p mkl
      travis_wait 30 curl -L $MKL_URL | tar -xz -C mkl --strip-components=1
      docker build --build-arg BUILD_LOCALLY="false" -t "$DOCKER_USERNAME"/$image -f $dockerfile .
      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      docker push "$DOCKER_USERNAME"/$image
      echo "-- DONE with $image"
      docker rmi "$DOCKER_USERNAME"/$image
      rm -rf mkl
    fi
  # Build Intel image
  - |
    dockerfile=Dockerfile.ubuntu-16.04_intel2018.1
    if [[ $CHANGED_FILES =~ (^|[[:space:]])$dockerfile($|[[:space:]]) ]]; then
      image=${dockerfile#Dockerfile.}
      echo "-- Building $image"
      mkdir -p mkl
      curl -L $INTEL_URL | tar -xz -C parallel_studio --strip-components=1
      docker build --build-arg BUILD_LOCALLY="false" -t "$DOCKER_USERNAME"/$image -f $dockerfile .
      docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      docker push "$DOCKER_USERNAME"/$image
      echo "-- DONE with $image"
      docker rmi "$DOCKER_USERNAME"/$image
      rm -rf parallel_studio
    fi
